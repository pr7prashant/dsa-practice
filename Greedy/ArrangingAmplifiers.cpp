/*

**************** Problem Description ****************

Scientists at the TIFR, Mumbai, are doing some cutting edge research on the Propagation of Signals.
A young researcher comes up with a method of progressively amplifying signals, as they progress along a path.
The method involves the placing of Amplifiers at regular distances along the line.
Each amplifier is loaded with a number a(i), which is called its amplification factor.
The method of amplification is simple: an amplifier which recieves a signal of strength X, and has Y loaded in it,
results in a signal of strength Y^X [ Y to the power X]. In course of his research, the young scientist tries to find out,
that given a set of n amplifiers loaded with a(0), a(1), a(2), ...., a(n-1), which particular permutation of these amplifiers,
when placed at successive nodes, with the initial node given a signal of strength 1, produces the strongest output signal.

This is better illustrated by the following example : 5 6 4
4^(5^(6^1)) is the strength of the strongest signal, which is generated by putting amplifier loaded with 6 in first place, 5 in second place and 4 in third place.

Given a list of integers specifying the set of amplifiers at hand, you must find out the order in which they must be placed, to get the highest signal strength.
In case their exist multiple permutations with same output, you should print the one which has bigger amplifiers first.

First line of input contains T, the number of test cases. For each test case first line contains a number ni, which is equal to the number of amplifiers available.
Next line contains n integers, separated by spaces which denote the values with which the amplifiers are loaded.
  
  
  Example 1 : 
  
  Input:
  2
  3
  5 6 4
  2
  2 3

  Output:
  6 5 4
  2 3
  
*/

#include <iostream>
#include <bits/stdc++.h>

#define ll long long

using namespace std;

list<ll> orderAmps(vector<ll> &amps, int n) {
	list<ll> ans;
	
	sort(amps.begin(), amps.end(), greater<int>());
	
	int i = 0;
	if (n > 1 && amps[0] == 3 && amps[1] == 2) {
		ans.push_back(2);
		ans.push_back(3);
		i = 2;
	}
	
	while (i < n) {
		if (amps[i] == 1) {
			ans.push_front(amps[i]);
		} else {
			ans.push_back(amps[i]);
		}
		i++;
	}
	
	return ans;
}

int main() {
	int t;
	cin >> t;
	
	while (t--) {
		int n;
		cin >> n;
		
		vector<ll> amps;
		for (int i = 0; i < n; i++) {
			ll temp;
			cin >> temp;
			amps.push_back(temp);
		}
		
		list<ll> ans = orderAmps(amps, n);
		
		for (auto it = ans.begin(); it != ans.end(); it++) {
			cout << *it << " ";
		}
		cout << endl;
	}
	
	return 0;
}

/*

**************** Logic ****************
Max amplitude will be when the amplifiers are arranged in decreasing order as x^y > y^x given x < y.
Exception cases :
1. When the largest amplifier has value 3 and next amplifier has value 2 (2^3 < 3^2)
2. Amplifiers with value 1 should be used at start as 1^x < x^1 given 1 < x.

*/
